<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Chorck
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-12-29T04:13:23Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation organisationCapabilityDelete
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function organisationCapabilityDelete($secret, $x_api_key)
    {
        list($response) = $this->organisationCapabilityDeleteWithHttpInfo($secret, $x_api_key);
        return $response;
    }

    /**
     * Operation organisationCapabilityDeleteWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationCapabilityDeleteWithHttpInfo($secret, $x_api_key)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationCapabilityDelete');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationCapabilityDelete');
        }
        // parse inputs
        $resourcePath = "/organisation/capability";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/organisation/capability'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation organisationCapabilityGet
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function organisationCapabilityGet($secret, $x_api_key)
    {
        list($response) = $this->organisationCapabilityGetWithHttpInfo($secret, $x_api_key);
        return $response;
    }

    /**
     * Operation organisationCapabilityGetWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationCapabilityGetWithHttpInfo($secret, $x_api_key)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationCapabilityGet');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationCapabilityGet');
        }
        // parse inputs
        $resourcePath = "/organisation/capability";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/organisation/capability'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation organisationCapabilityPut
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @param \Swagger\Client\Model\AddCapability $add_capability  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AddCapabilityResponse
     */
    public function organisationCapabilityPut($secret, $x_api_key, $add_capability)
    {
        list($response) = $this->organisationCapabilityPutWithHttpInfo($secret, $x_api_key, $add_capability);
        return $response;
    }

    /**
     * Operation organisationCapabilityPutWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @param \Swagger\Client\Model\AddCapability $add_capability  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AddCapabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationCapabilityPutWithHttpInfo($secret, $x_api_key, $add_capability)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationCapabilityPut');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationCapabilityPut');
        }
        // verify the required parameter 'add_capability' is set
        if ($add_capability === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_capability when calling organisationCapabilityPut');
        }
        // parse inputs
        $resourcePath = "/organisation/capability";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($add_capability)) {
            $_tempBody = $add_capability;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AddCapabilityResponse',
                '/organisation/capability'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AddCapabilityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AddCapabilityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation organisationGet
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function organisationGet($secret, $x_api_key)
    {
        list($response) = $this->organisationGetWithHttpInfo($secret, $x_api_key);
        return $response;
    }

    /**
     * Operation organisationGetWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationGetWithHttpInfo($secret, $x_api_key)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationGet');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationGet');
        }
        // parse inputs
        $resourcePath = "/organisation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/organisation'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation organisationStaffDelete
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function organisationStaffDelete($secret, $x_api_key)
    {
        list($response) = $this->organisationStaffDeleteWithHttpInfo($secret, $x_api_key);
        return $response;
    }

    /**
     * Operation organisationStaffDeleteWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationStaffDeleteWithHttpInfo($secret, $x_api_key)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationStaffDelete');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationStaffDelete');
        }
        // parse inputs
        $resourcePath = "/organisation/staff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/organisation/staff'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation organisationStaffGet
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function organisationStaffGet($secret, $x_api_key)
    {
        list($response) = $this->organisationStaffGetWithHttpInfo($secret, $x_api_key);
        return $response;
    }

    /**
     * Operation organisationStaffGetWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationStaffGetWithHttpInfo($secret, $x_api_key)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationStaffGet');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationStaffGet');
        }
        // parse inputs
        $resourcePath = "/organisation/staff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/organisation/staff'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation organisationStaffPut
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @param \Swagger\Client\Model\InviteStaff $invite_staff  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function organisationStaffPut($secret, $x_api_key, $invite_staff)
    {
        list($response) = $this->organisationStaffPutWithHttpInfo($secret, $x_api_key, $invite_staff);
        return $response;
    }

    /**
     * Operation organisationStaffPutWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @param \Swagger\Client\Model\InviteStaff $invite_staff  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationStaffPutWithHttpInfo($secret, $x_api_key, $invite_staff)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling organisationStaffPut');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling organisationStaffPut');
        }
        // verify the required parameter 'invite_staff' is set
        if ($invite_staff === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invite_staff when calling organisationStaffPut');
        }
        // parse inputs
        $resourcePath = "/organisation/staff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($invite_staff)) {
            $_tempBody = $invite_staff;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/organisation/staff'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rootGet
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ModelEmpty
     */
    public function rootGet($secret, $x_api_key)
    {
        list($response) = $this->rootGetWithHttpInfo($secret, $x_api_key);
        return $response;
    }

    /**
     * Operation rootGetWithHttpInfo
     *
     * @param string $secret  (required)
     * @param string $x_api_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function rootGetWithHttpInfo($secret, $x_api_key)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret when calling rootGet');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling rootGet');
        }
        // parse inputs
        $resourcePath = "/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded']);

        // header params
        if ($secret !== null) {
            $headerParams['Secret'] = $this->apiClient->getSerializer()->toHeaderValue($secret);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ModelEmpty',
                '/'
            );

            return [$response->data, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModelEmpty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
